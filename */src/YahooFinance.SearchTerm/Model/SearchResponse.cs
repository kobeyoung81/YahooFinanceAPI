/* 
 * Yahoo Finance API
 *
 * This is the API from yahoo finance to search for symbols and get quotes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kobeyoung81@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = YahooFinance.SearchTerm.Client.SwaggerDateConverter;

namespace YahooFinance.SearchTerm.Model
{
    /// <summary>
    /// SearchResponse
    /// </summary>
    [DataContract]
        public partial class SearchResponse :  IEquatable<SearchResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponse" /> class.
        /// </summary>
        /// <param name="suggestionTitleAccessor">suggestionTitleAccessor.</param>
        /// <param name="suggestionMeta">suggestionMeta.</param>
        /// <param name="hiConf">hiConf.</param>
        /// <param name="items">items.</param>
        public SearchResponse(string suggestionTitleAccessor = default(string), List<string> suggestionMeta = default(List<string>), bool? hiConf = default(bool?), List<YahooTicker> items = default(List<YahooTicker>))
        {
            this.SuggestionTitleAccessor = suggestionTitleAccessor;
            this.SuggestionMeta = suggestionMeta;
            this.HiConf = hiConf;
            this.Items = items;
        }
        
        /// <summary>
        /// Gets or Sets SuggestionTitleAccessor
        /// </summary>
        [DataMember(Name="suggestionTitleAccessor", EmitDefaultValue=false)]
        public string SuggestionTitleAccessor { get; set; }

        /// <summary>
        /// Gets or Sets SuggestionMeta
        /// </summary>
        [DataMember(Name="suggestionMeta", EmitDefaultValue=false)]
        public List<string> SuggestionMeta { get; set; }

        /// <summary>
        /// Gets or Sets HiConf
        /// </summary>
        [DataMember(Name="hiConf", EmitDefaultValue=false)]
        public bool? HiConf { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<YahooTicker> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResponse {\n");
            sb.Append("  SuggestionTitleAccessor: ").Append(SuggestionTitleAccessor).Append("\n");
            sb.Append("  SuggestionMeta: ").Append(SuggestionMeta).Append("\n");
            sb.Append("  HiConf: ").Append(HiConf).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResponse);
        }

        /// <summary>
        /// Returns true if SearchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SuggestionTitleAccessor == input.SuggestionTitleAccessor ||
                    (this.SuggestionTitleAccessor != null &&
                    this.SuggestionTitleAccessor.Equals(input.SuggestionTitleAccessor))
                ) && 
                (
                    this.SuggestionMeta == input.SuggestionMeta ||
                    this.SuggestionMeta != null &&
                    input.SuggestionMeta != null &&
                    this.SuggestionMeta.SequenceEqual(input.SuggestionMeta)
                ) && 
                (
                    this.HiConf == input.HiConf ||
                    (this.HiConf != null &&
                    this.HiConf.Equals(input.HiConf))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SuggestionTitleAccessor != null)
                    hashCode = hashCode * 59 + this.SuggestionTitleAccessor.GetHashCode();
                if (this.SuggestionMeta != null)
                    hashCode = hashCode * 59 + this.SuggestionMeta.GetHashCode();
                if (this.HiConf != null)
                    hashCode = hashCode * 59 + this.HiConf.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }
    }
}
